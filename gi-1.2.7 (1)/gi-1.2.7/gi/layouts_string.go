// Code generated by "stringer -type=Layouts"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LayoutHoriz-0]
	_ = x[LayoutVert-1]
	_ = x[LayoutGrid-2]
	_ = x[LayoutHorizFlow-3]
	_ = x[LayoutVertFlow-4]
	_ = x[LayoutStacked-5]
	_ = x[LayoutNil-6]
	_ = x[LayoutsN-7]
}

const _Layouts_name = "LayoutHorizLayoutVertLayoutGridLayoutHorizFlowLayoutVertFlowLayoutStackedLayoutNilLayoutsN"

var _Layouts_index = [...]uint8{0, 11, 21, 31, 46, 60, 73, 82, 90}

func (i Layouts) String() string {
	if i < 0 || i >= Layouts(len(_Layouts_index)-1) {
		return "Layouts(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Layouts_name[_Layouts_index[i]:_Layouts_index[i+1]]
}

func (i *Layouts) FromString(s string) error {
	for j := 0; j < len(_Layouts_index)-1; j++ {
		if s == _Layouts_name[_Layouts_index[j]:_Layouts_index[j+1]] {
			*i = Layouts(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Layouts")
}
