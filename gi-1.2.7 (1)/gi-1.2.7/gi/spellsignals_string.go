// Code generated by "stringer -type=SpellSignals"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SpellSelect-0]
	_ = x[SpellIgnore-1]
}

const _SpellSignals_name = "SpellSelectSpellIgnore"

var _SpellSignals_index = [...]uint8{0, 11, 22}

func (i SpellSignals) String() string {
	if i < 0 || i >= SpellSignals(len(_SpellSignals_index)-1) {
		return "SpellSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SpellSignals_name[_SpellSignals_index[i]:_SpellSignals_index[i+1]]
}

func (i *SpellSignals) FromString(s string) error {
	for j := 0; j < len(_SpellSignals_index)-1; j++ {
		if s == _SpellSignals_name[_SpellSignals_index[j]:_SpellSignals_index[j+1]] {
			*i = SpellSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: SpellSignals")
}
