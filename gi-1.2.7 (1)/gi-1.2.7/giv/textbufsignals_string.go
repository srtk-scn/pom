// Code generated by "stringer -type=TextBufSignals"; DO NOT EDIT.

package giv

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextBufDone-0]
	_ = x[TextBufNew-1]
	_ = x[TextBufInsert-2]
	_ = x[TextBufDelete-3]
	_ = x[TextBufMarkUpdt-4]
	_ = x[TextBufClosed-5]
	_ = x[TextBufSignalsN-6]
}

const _TextBufSignals_name = "TextBufDoneTextBufNewTextBufInsertTextBufDeleteTextBufMarkUpdtTextBufClosedTextBufSignalsN"

var _TextBufSignals_index = [...]uint8{0, 11, 21, 34, 47, 62, 75, 90}

func (i TextBufSignals) String() string {
	if i < 0 || i >= TextBufSignals(len(_TextBufSignals_index)-1) {
		return "TextBufSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextBufSignals_name[_TextBufSignals_index[i]:_TextBufSignals_index[i+1]]
}

func (i *TextBufSignals) FromString(s string) error {
	for j := 0; j < len(_TextBufSignals_index)-1; j++ {
		if s == _TextBufSignals_name[_TextBufSignals_index[j]:_TextBufSignals_index[j+1]] {
			*i = TextBufSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TextBufSignals")
}
