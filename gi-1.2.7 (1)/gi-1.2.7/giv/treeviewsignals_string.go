// Code generated by "stringer -type=TreeViewSignals"; DO NOT EDIT.

package giv

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TreeViewSelected-0]
	_ = x[TreeViewUnselected-1]
	_ = x[TreeViewAllSelected-2]
	_ = x[TreeViewAllUnselected-3]
	_ = x[TreeViewOpened-4]
	_ = x[TreeViewClosed-5]
	_ = x[TreeViewChanged-6]
	_ = x[TreeViewInserted-7]
	_ = x[TreeViewDeleted-8]
	_ = x[TreeViewSignalsN-9]
}

const _TreeViewSignals_name = "TreeViewSelectedTreeViewUnselectedTreeViewAllSelectedTreeViewAllUnselectedTreeViewOpenedTreeViewClosedTreeViewChangedTreeViewInsertedTreeViewDeletedTreeViewSignalsN"

var _TreeViewSignals_index = [...]uint8{0, 16, 34, 53, 74, 88, 102, 117, 133, 148, 164}

func (i TreeViewSignals) String() string {
	if i < 0 || i >= TreeViewSignals(len(_TreeViewSignals_index)-1) {
		return "TreeViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TreeViewSignals_name[_TreeViewSignals_index[i]:_TreeViewSignals_index[i+1]]
}

func (i *TreeViewSignals) FromString(s string) error {
	for j := 0; j < len(_TreeViewSignals_index)-1; j++ {
		if s == _TreeViewSignals_name[_TreeViewSignals_index[j]:_TreeViewSignals_index[j+1]] {
			*i = TreeViewSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TreeViewSignals")
}
