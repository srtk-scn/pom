// Code generated by "stringer -type=EventType"; DO NOT EDIT.

package oswin

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MouseEvent-0]
	_ = x[MouseMoveEvent-1]
	_ = x[MouseDragEvent-2]
	_ = x[MouseScrollEvent-3]
	_ = x[MouseFocusEvent-4]
	_ = x[MouseHoverEvent-5]
	_ = x[KeyEvent-6]
	_ = x[KeyChordEvent-7]
	_ = x[TouchEvent-8]
	_ = x[MagnifyEvent-9]
	_ = x[RotateEvent-10]
	_ = x[WindowEvent-11]
	_ = x[WindowResizeEvent-12]
	_ = x[WindowPaintEvent-13]
	_ = x[WindowShowEvent-14]
	_ = x[WindowFocusEvent-15]
	_ = x[DNDEvent-16]
	_ = x[DNDMoveEvent-17]
	_ = x[DNDFocusEvent-18]
	_ = x[OSEvent-19]
	_ = x[OSOpenFilesEvent-20]
	_ = x[CustomEventType-21]
	_ = x[EventTypeN-22]
}

const _EventType_name = "MouseEventMouseMoveEventMouseDragEventMouseScrollEventMouseFocusEventMouseHoverEventKeyEventKeyChordEventTouchEventMagnifyEventRotateEventWindowEventWindowResizeEventWindowPaintEventWindowShowEventWindowFocusEventDNDEventDNDMoveEventDNDFocusEventOSEventOSOpenFilesEventCustomEventTypeEventTypeN"

var _EventType_index = [...]uint16{0, 10, 24, 38, 54, 69, 84, 92, 105, 115, 127, 138, 149, 166, 182, 197, 213, 221, 233, 246, 253, 269, 284, 294}

func (i EventType) String() string {
	if i < 0 || i >= EventType(len(_EventType_index)-1) {
		return "EventType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _EventType_name[_EventType_index[i]:_EventType_index[i+1]]
}

func (i *EventType) FromString(s string) error {
	for j := 0; j < len(_EventType_index)-1; j++ {
		if s == _EventType_name[_EventType_index[j]:_EventType_index[j+1]] {
			*i = EventType(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: EventType")
}
