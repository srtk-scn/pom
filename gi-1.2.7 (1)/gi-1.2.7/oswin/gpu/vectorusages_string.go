// Code generated by "stringer -type=VectorUsages"; DO NOT EDIT.

package gpu

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StreamDraw-0]
	_ = x[StreamRead-1]
	_ = x[StreamCopy-2]
	_ = x[StaticDraw-3]
	_ = x[StaticRead-4]
	_ = x[StaticCopy-5]
	_ = x[DynamicDraw-6]
	_ = x[DynamicRead-7]
	_ = x[DynamicCopy-8]
	_ = x[VectorUsagesN-9]
}

const _VectorUsages_name = "StreamDrawStreamReadStreamCopyStaticDrawStaticReadStaticCopyDynamicDrawDynamicReadDynamicCopyVectorUsagesN"

var _VectorUsages_index = [...]uint8{0, 10, 20, 30, 40, 50, 60, 71, 82, 93, 106}

func (i VectorUsages) String() string {
	if i < 0 || i >= VectorUsages(len(_VectorUsages_index)-1) {
		return "VectorUsages(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _VectorUsages_name[_VectorUsages_index[i]:_VectorUsages_index[i+1]]
}

func (i *VectorUsages) FromString(s string) error {
	for j := 0; j < len(_VectorUsages_index)-1; j++ {
		if s == _VectorUsages_name[_VectorUsages_index[j]:_VectorUsages_index[j+1]] {
			*i = VectorUsages(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: VectorUsages")
}
