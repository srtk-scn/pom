// Copyright 2018 The GoKi Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// based on golang.org/x/exp/shiny:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build linux,!android openbsd

package x11driver

/*
#cgo linux      LDFLAGS: -lEGL -lGLESv2 -lX11
#cgo openbsd    LDFLAGS: -L/usr/X11R6/lib/ -lEGL -lGLESv2 -lX11

#cgo openbsd    CFLAGS: -I/usr/X11R6/include/

#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

char *eglGetErrorStr();
void startDriver();
void processEvents();
void makeCurrent(uintptr_t ctx);
void swapBuffers(uintptr_t ctx);
void doCloseWindow(uintptr_t id);
uintptr_t doNewWindow(int width, int height, int left, int top, char* title, int title_len, bool dialog, bool modal, bool tool, bool fullscreen);
uintptr_t doShowWindow(uintptr_t id);
void getScreens();
uintptr_t surfaceCreate();
*/
import "C"
import (
	"errors"
	"image"
	"log"
	"os"
	"os/user"
	"path/filepath"
	"runtime"
	"time"
	"unsafe"

	"github.com/goki/gi/oswin"
	"github.com/goki/gi/oswin/key"
	"github.com/goki/gi/oswin/mouse"
	"github.com/goki/gi/oswin/paint"
	"github.com/goki/gi/oswin/window"
	"golang.org/x/mobile/gl"
)

var theKeysyms KeysymTable

func init() {
	// It might not be necessary, but it probably doesn't hurt to try to make
	// 'the main thread' be 'the X11 / OpenGL thread'.
	runtime.LockOSThread()
}

func newWindow(opts *oswin.NewWindowOptions) (uintptr, error) {
	dialog, modal, tool, fullscreen := oswin.WindowFlagsToBool(opts.Flags)

	title := opts.GetTitle()
	ctitle := C.CString(title)
	defer C.free(unsafe.Pointer(ctitle))

	retc := make(chan uintptr)
	uic <- uiClosure{
		f: func() uintptr {
			return uintptr(C.doNewWindow(C.int(opts.Size.X), C.int(opts.Size.Y), C.int(opts.Pos.X), C.int(opts.Pos.Y), ctitle, C.int(len(title)), C.bool(dialog), C.bool(modal), C.bool(tool), C.bool(fullscreen)))
		},
		retc: retc,
	}
	return <-retc, nil
}

func initWindow(w *windowImpl) {
	w.glctx, w.worker = glctx, worker
}

func showWindow(w *windowImpl) {
	retc := make(chan uintptr)
	uic <- uiClosure{
		f: func() uintptr {
			return uintptr(C.doShowWindow(C.uintptr_t(w.id)))
		},
		retc: retc,
	}
	w.ctx = <-retc
	go drawLoop(w)
}

func resizeWindow(w *windowImpl, sz image.Point) {
	//	C.doResizeWindow(C.uintptr_t(w.id), C.int(sz.X), C.int(sz.Y))
}

func closeWindow(id uintptr) {
	uic <- uiClosure{
		f: func() uintptr {
			C.doCloseWindow(C.uintptr_t(id))
			return 0
		},
	}
}

func drawLoop(w *windowImpl) {
	glcontextc <- w.ctx.(uintptr)
	go func() {
		for range w.publish {
			publishc <- w
		}
	}()
}

var (
	glcontextc = make(chan uintptr)
	publishc   = make(chan *windowImpl)
	uic        = make(chan uiClosure)

	// TODO: don't assume that there is only one window, and hence only
	// one (global) GL context.
	//
	// TODO: should we be able to make a shiny.Texture before having a
	// shiny.Window's GL context? Should something like gl.IsProgram be a
	// method instead of a function, and have each shiny.Window have its own
	// gl.Context?
	glctx  gl.Context
	worker gl.Worker
)

// uiClosure is a closure to be run on C's UI thread.
type uiClosure struct {
	f    func() uintptr
	retc chan uintptr
}

func main(f func(oswin.App)) error {
	if gl.Version() == "GL_ES_2_0" {
		return errors.New("gldriver: ES 3 required on X11")
	}
	C.startDriver()
	glctx, worker = gl.NewContext()

	oswin.TheApp = theApp

	closec := make(chan struct{})
	go func() {
		f(theApp)
		close(closec)
	}()

	// heartbeat is a channel that, at regular intervals, directs the select
	// below to also consider X11 events, not just Go events (channel
	// communications).
	//
	// TODO: select instead of poll. Note that knowing whether to call
	// C.processEvents needs to select on a file descriptor, and the other
	// cases below select on Go channels.
	heartbeat := time.NewTicker(time.Second / 60)
	workAvailable := worker.WorkAvailable()

	for {
		select {
		case <-closec:
			return nil
		case ctx := <-glcontextc:
			// TODO: do we need to synchronize with seeing a size event for
			// this window's context before or after calling makeCurrent?
			// Otherwise, are we racing with the gl.Viewport call? I've
			// occasionally seen a stale viewport, if the window manager sets
			// the window width and height to something other than that
			// requested by XCreateWindow, but it's not easily reproducible.
			C.makeCurrent(C.uintptr_t(ctx))
		case w := <-publishc:
			C.swapBuffers(C.uintptr_t(w.ctx.(uintptr)))
			w.publishDone <- oswin.PublishResult{}
		case req := <-uic:
			ret := req.f()
			if req.retc != nil {
				req.retc <- ret
			}
		case <-heartbeat.C:
			C.processEvents()
		case <-workAvailable:
			worker.DoWork()
		}
	}
}

//export resetScreens
func resetScreens() {
	theApp.mu.Lock()
	theApp.screens = make([]*oswin.Screen, 0)
	theApp.mu.Unlock()
}

//export setScreen
func setScreen(scrIdx int, dpi, pixratio float32, widthPx, heightPx, widthMM, heightMM, depth int) {
	theApp.mu.Lock()
	var sc *oswin.Screen
	if scrIdx < len(theApp.screens) {
		sc = theApp.screens[scrIdx]
	} else {
		sc = &oswin.Screen{}
		theApp.screens = append(theApp.screens, sc)
	}
	theApp.mu.Unlock()

	sc.ScreenNumber = scrIdx
	sc.Geometry = image.Rectangle{Min: image.ZP, Max: image.Point{widthPx, heightPx}}
	sc.Depth = depth
	sc.LogicalDPI = oswin.LogicalFmPhysicalDPI(dpi)
	sc.PhysicalDPI = dpi
	sc.DevicePixelRatio = pixratio
	sc.PhysicalSize = image.Point{widthMM, heightMM}
	// todo: rest of the fields
}

//export onExpose
func onExpose(id uintptr) {
	theApp.mu.Lock()
	w := theApp.windows[id]
	theApp.mu.Unlock()

	if w == nil {
		return
	}

	w.Send(&paint.Event{External: true})
}

//export onKeysym
func onKeysym(k, unshifted, shifted uint32) {
	theKeysyms[k][0] = unshifted
	theKeysyms[k][1] = shifted
}

//export onKey
func onKey(id uintptr, state uint16, detail, act uint8) {
	theApp.mu.Lock()
	w := theApp.windows[id]
	theApp.mu.Unlock()

	if w == nil {
		return
	}

	r, c := theKeysyms.Lookup(detail, state)

	event := &key.Event{
		Rune:      r,
		Code:      c,
		Modifiers: KeyModifiers(state),
		Action:    key.Action(act),
	}
	event.Init()
	w.Send(event)
}

var lastMouseClickEvent oswin.Event
var lastMouseEvent oswin.Event

//export onMouse
func onMouse(id uintptr, x, y int32, state uint16, button, dir uint8) {
	theApp.mu.Lock()
	w := theApp.windows[id]
	theApp.mu.Unlock()
	if w == nil {
		return
	}
	where := image.Point{int(x), int(y)}
	from := image.ZP
	if lastMouseEvent != nil {
		from = lastMouseEvent.Pos()
	}
	mods := KeyModifiers(state)
	stb := mouse.Button(ButtonFromState(state))

	var event oswin.Event
	switch {
	case button == 0: // moved
		if stb > 0 { // drag
			event = &mouse.DragEvent{
				MoveEvent: mouse.MoveEvent{
					Event: mouse.Event{
						Where:     where,
						Button:    stb,
						Action:    mouse.Drag,
						Modifiers: mods,
					},
					From: from,
				},
			}
		} else {
			event = &mouse.MoveEvent{
				Event: mouse.Event{
					Where:     where,
					Button:    mouse.NoButton,
					Action:    mouse.Move,
					Modifiers: mods,
				},
				From: from,
			}
		}
	case button < 4: // regular click
		act := mouse.Action(dir)
		if act == mouse.Press && lastMouseClickEvent != nil {
			interval := time.Now().Sub(lastMouseClickEvent.Time())
			// fmt.Printf("interval: %v\n", interval)
			if (interval / time.Millisecond) < time.Duration(mouse.DoubleClickMSec) {
				act = mouse.DoubleClick
			}
		}
		event = &mouse.Event{
			Where:     where,
			Button:    mouse.Button(button),
			Action:    act,
			Modifiers: mods,
		}
		if act == mouse.Press {
			event.SetTime()
			lastMouseClickEvent = event
		}
	default: // scroll wheel, 4-7
		if dir != uint8(mouse.Press) { // only care about these for scrolling
			return
		}
		del := image.Point{}
		switch button {
		case 4: // up
			del.Y = -mouse.ScrollWheelRate
		case 5: // down
			del.Y = mouse.ScrollWheelRate
		case 6: // left
			del.X = -mouse.ScrollWheelRate
		case 7: // right
			del.X = mouse.ScrollWheelRate
		}
		event = &mouse.ScrollEvent{
			Event: mouse.Event{
				Where:     where,
				Button:    stb,
				Action:    mouse.Scroll,
				Modifiers: mods,
			},
			Delta: del,
		}
	}
	event.Init()
	lastMouseEvent = event
	w.Send(event)
}

//export onFocus
func onFocus(id uintptr, focused bool) {
	theApp.mu.Lock()
	w := theApp.windows[id]
	theApp.mu.Unlock()

	if w == nil {
		return
	}

	// w.lifecycler.SetFocused(focused)
	// w.lifecycler.SendEvent(w, w.glctx)
}

//export onConfigure
func onConfigure(id uintptr, scrno, x, y, width, height, displayWidth, displayWidthMM int32) {
	theApp.mu.Lock()
	w := theApp.windows[id]
	theApp.mu.Unlock()

	if w == nil {
		return
	}

	// w.lifecycler.SetVisible(x+width > 0 && y+height > 0)
	// w.lifecycler.SendEvent(w, w.glctx)

	dpi := 25.4 * (float32(displayWidth) / float32(displayWidthMM))
	ldpi := oswin.LogicalFmPhysicalDPI(dpi)

	sz := image.Point{int(width), int(height)}
	ps := image.Point{int(x), int(y)}

	act := window.ActionN

	if w.Sz != sz || w.PhysDPI != dpi || w.LogDPI != ldpi {
		act = window.Resize
	} else if w.Pos != ps {
		act = window.Move
	} else {
		act = window.Resize // todo: for now safer to default to resize -- to catch the filtering
	}

	w.sizeMu.Lock()
	w.Sz = sz
	w.Pos = ps
	w.PhysDPI = dpi
	w.LogDPI = ldpi

	if scrno > 0 && len(theApp.screens) > int(scrno) {
		w.Scrn = theApp.screens[scrno]
	}

	w.sizeMu.Unlock()

	winEv := window.Event{
		Size:       sz,
		LogicalDPI: ldpi,
		Action:     act,
	}
	winEv.Init()
	w.Send(&winEv)
}

//export onDeleteWindow
func onDeleteWindow(id uintptr) {
	theApp.mu.Lock()
	w := theApp.windows[id]
	theApp.mu.Unlock()

	if w == nil {
		return
	}

	// w.lifecycler.SetDead(true)
	// w.lifecycler.SendEvent(w, w.glctx)
}

func surfaceCreate() error {
	if C.surfaceCreate() == 0 {
		return errors.New("gldriver: surface creation failed")
	}
	return nil
}

func (app *appImpl) PrefsDir() string {
	usr, err := user.Current()
	if err != nil {
		log.Print(err)
		return "/tmp"
	}
	return filepath.Join(usr.HomeDir, ".config")
}

func (app *appImpl) GoGiPrefsDir() string {
	pdir := filepath.Join(app.PrefsDir(), "GoGi")
	os.MkdirAll(pdir, 0755)
	return pdir
}

func (app *appImpl) AppPrefsDir() string {
	pdir := filepath.Join(app.PrefsDir(), app.Name())
	os.MkdirAll(pdir, 0755)
	return pdir
}

func (app *appImpl) FontPaths() []string {
	return []string{"/usr/share/fonts/truetype", "/usr/local/share/fonts"}
}
