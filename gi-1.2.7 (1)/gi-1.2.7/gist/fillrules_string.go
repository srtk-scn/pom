// Code generated by "stringer -type=FillRules"; DO NOT EDIT.

package gist

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FillRuleNonZero-0]
	_ = x[FillRuleEvenOdd-1]
	_ = x[FillRulesN-2]
}

const _FillRules_name = "FillRuleNonZeroFillRuleEvenOddFillRulesN"

var _FillRules_index = [...]uint8{0, 15, 30, 40}

func (i FillRules) String() string {
	if i < 0 || i >= FillRules(len(_FillRules_index)-1) {
		return "FillRules(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FillRules_name[_FillRules_index[i]:_FillRules_index[i+1]]
}

func (i *FillRules) FromString(s string) error {
	for j := 0; j < len(_FillRules_index)-1; j++ {
		if s == _FillRules_name[_FillRules_index[j]:_FillRules_index[j+1]] {
			*i = FillRules(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: FillRules")
}
