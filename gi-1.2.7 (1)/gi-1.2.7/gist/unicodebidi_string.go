// Code generated by "stringer -type=UnicodeBidi"; DO NOT EDIT.

package gist

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BidiNormal-0]
	_ = x[BidiEmbed-1]
	_ = x[BidiBidiOverride-2]
	_ = x[UnicodeBidiN-3]
}

const _UnicodeBidi_name = "BidiNormalBidiEmbedBidiBidiOverrideUnicodeBidiN"

var _UnicodeBidi_index = [...]uint8{0, 10, 19, 35, 47}

func (i UnicodeBidi) String() string {
	if i < 0 || i >= UnicodeBidi(len(_UnicodeBidi_index)-1) {
		return "UnicodeBidi(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _UnicodeBidi_name[_UnicodeBidi_index[i]:_UnicodeBidi_index[i+1]]
}

func (i *UnicodeBidi) FromString(s string) error {
	for j := 0; j < len(_UnicodeBidi_index)-1; j++ {
		if s == _UnicodeBidi_name[_UnicodeBidi_index[j]:_UnicodeBidi_index[j+1]] {
			*i = UnicodeBidi(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: UnicodeBidi")
}
